/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2013 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#ifndef OSGEARTH_DRIVER_REFRESH_MAPLAYERFACTORY
#define OSGEARTH_DRIVER_REFRESH_MAPLAYERFACTORY 1

#include <VBF_3DMap/VBF_Terrain/Common.h>
#include <VBF_3DMap/VBF_Terrain/VBF_SourceTile.h>
#include <VBF_3DMap/VBF_Terrain/URI.h>

namespace osgEarth { namespace Drivers
{
    using namespace osgEarth;

    class RefreshOptions : public CVBF_OptionsDriverSourceTile // NO EXPORT; header only
    {
    public:
        CVBF_Optional<URI>& url() { return _url; }
        const CVBF_Optional<URI>& url() const { return _url; }

        CVBF_Optional<double>& frequency() { return _frequency; }
        const CVBF_Optional<double>& frequency() const { return _frequency; }

    public:
        RefreshOptions( const CVBF_OptionsDriverSourceTile& opt =CVBF_OptionsDriverSourceTile() ) : CVBF_OptionsDriverSourceTile( opt )
        {
            setDriver( "refresh" );
            frequency() = 2.0;            
            fromConfig( m_conf );
        }

        RefreshOptions( const std::string& inUrl, double inFrequency ) : CVBF_OptionsDriverSourceTile()
        {
            setDriver( "refresh" );
            fromConfig( m_conf );
            _url = inUrl;
             _frequency = inFrequency;
        }

        /** dtor */
        virtual ~RefreshOptions() { }

    public:
        CVBF_Config getConfig() const {
            CVBF_Config conf = CVBF_OptionsDriverSourceTile::getConfig();
            conf.updateIfSet("url", _url);
            conf.updateIfSet("frequency", _frequency);            
            return conf;
        }

    protected:
        void mergeConfig( const CVBF_Config& conf ) {
            CVBF_OptionsDriverSourceTile::mergeConfig( conf );
            fromConfig( conf );
        }

    private:
        void fromConfig( const CVBF_Config& conf ) {
            conf.getIfSet( "url", _url );
            conf.getIfSet( "frequency", _frequency );
        }

        CVBF_Optional<URI>         _url;
        CVBF_Optional<double>      _frequency;
    };

} } // namespace osgEarth::Drivers

#endif // OSGEARTH_DRIVER_TMS_MAPLAYERFACTORY

