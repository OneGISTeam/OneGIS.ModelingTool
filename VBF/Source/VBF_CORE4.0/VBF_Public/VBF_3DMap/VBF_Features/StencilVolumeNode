#ifndef OSGEARTHFEATURES_STENCIL_VOLUME_NODE_H
#define OSGEARTHFEATURES_STENCIL_VOLUME_NODE_H 1

#include <VBF_3DMap/VBF_Features/Common>
#include <VBF_3DMap/VBF_Features/VBF_FeatureFilter.h>
#include <VBF_3DMap/VBF_Features/Geometry>
#include <VBF_3DMap/VBF_Terrain/MaskNode>
#include <VBF_Engine/VBF_SceneGraph/IVBF_SGNodeGroup.h>
#include <Types/Vec4>

namespace osgEarth { namespace Features 
{
    class OSGEARTHFEATURES_EXPORT StencilVolumeNode : public osgEarth::MaskNode
    {
    public:
        /**
         * Constructs a stencil masking node.
         *
         * @param preRenderChildrenToDepthBuffer
         *     Normally, this node will render the stencil volumes first and then
         *     render the children (which will be masked by the stencil). If you need
         *     to pre-render the children to the depth buffer, set this to TRUE. You
         *     need to do this is you are creating a straight render mask.
         *
         * @param inverted
         *     Inverts the stencil buffer, masking the opposite pixels that would
         *     normally be masked.
         */
        StencilVolumeNode( bool preRenderChildrenToDepthBuffer =false, bool inverted =false );
        StencilVolumeNode( const StencilVolumeNode& rhs, const osg::CopyOp& op =osg::CopyOp::DEEP_COPY_ALL );

        META_Node(osgEarth::Features,StencilVolumeNode);
        
        virtual void traverse( osg::NodeVisitor& nv );

    public: // props

        // sets the render bins and returns the next available bin.
        int setBaseRenderBin( int bin );

        // adds stenciling volume geometry
        void addVolumes( osg::IVBF_SGNode* node );

        // adds the node to draw once the stencil is in place.
        //void setChild( osg::IVBF_SGNode* node );

    public: //osg::Group overrides

        virtual bool addChild( Node *child );
        virtual bool insertChild( unsigned int index, Node *child );
        virtual bool removeChildren(unsigned int pos,unsigned int numChildrenToRemove);
        virtual bool replaceChild( Node *origChild, Node* newChild );
        virtual bool setChild( unsigned  int i, Node* node );
        virtual osg::BoundingSphere computeBound() const;

    protected:
        void init();

        ref_ptr<osg::IVBF_SGNodeGroup> _root;
        osg::IVBF_SGNodeGroup* _stencilGroup1;
        osg::IVBF_SGNodeGroup* _stencilGroup2;
        osg::IVBF_SGNodeGroup* _depthPass;
        osg::IVBF_SGNodeGroup* _renderPass;
        bool _inverted;
        bool _preRenderChildrenToDepthBuffer;
    };


    class OSGEARTHFEATURES_EXPORT StencilVolumeFactory
    {
    public:
        static osg::IVBF_SGNodeGeometry* createVolume(
            Geometry*            geom,
            double               offset,
            double               height,
            const FilterContext& context );
    };

} } // namespace osgEarth::Features

#endif // OSGEARTHFEATURES_STENCIL_VOLUME_NODE_H

