#ifndef OSGEARTHUTIL_TMS_PACKAGER_H
#define OSGEARTHUTIL_TMS_PACKAGER_H

#include <VBF_3DMap/VBF_EarthUtil/Common>
#include <VBF_3DMap/VBF_Terrain/VBF_LayerTerrainImage.h>
#include <VBF_3DMap/VBF_Terrain/VBF_LayerTerrainElevation.h>
#include <VBF_3DMap/VBF_Terrain/VBF_Profile.h>

namespace osgEarth { namespace Util
{
    /**
     * Utility that reads tiles from an CVBF_LayerTerrainImage or CVBF_LayerTerrainElevation and stores
     * the resulting data in a disk-based TMS (Tile CVBF_Map Service) repository.
     *
     * See: http://wiki.osgeo.org/wiki/Tile_Map_Service_Specification
     */
    class OSGEARTHUTIL_EXPORT TMSPackager
    {
    public:
        /**
         * Constructs a new packager.
         * @param profile    CVBF_Profile of packaged tile data (required)
         */
        TMSPackager( const CVBF_Profile* outProfile, osgDB::Options* imageWriteOptions);

        /** dtor */
        virtual ~TMSPackager() { }

        /**
         * Whether to dump out progress messages 
         * default = false
         */
        void setVerbose( bool value ) { _verbose = value; }
        bool getVerbose() const { return _verbose; }

        /**
         * Whether to abort if a tile writing error is encountered
         * default = true
         */
        void setAbortOnError( bool value ) { _abortOnError = value; }
        bool getAbortOnError() const { return _abortOnError; }

        /**
         * Maximum level of detail of tiles to package
         */
        void setMaxLevel( unsigned value ) { _maxLevel = value; }
        unsigned getMaxLevel() const { return _maxLevel; }

        /**
         * Whether to overwrite files that already exist in the repo
         * default = false
         */
        void setOverwrite( bool value ) { _overwrite = value; }
        bool getOverwrite() const { return _overwrite; }

        /**
         * Whether to package empty image tiles. An empty tile is a tile
         * that is fully transparent. By default, the packager discards
         * them and does not subdivide past them.
         * default = false
         */
        void setKeepEmptyImageTiles( bool value ) { _keepEmptyImageTiles = value; }
        bool getKeepEmptyImageTiles() const { return _keepEmptyImageTiles; }

        /**
         * Whether to subdivide single color image tiles. An single color tile is a tile
         * that is filled with a single color. By default, the packager does not subdivide past them.
         * default = false
         */
        void setSubdivideSingleColorImageTiles( bool value ) { _subdivideSingleColorImageTiles = value; }
        bool getSubdivideSingleColorImageTiles() const { return _subdivideSingleColorImageTiles; }

        /**
         * Bounding box to package
         */
        void addExtent( const CVBF_GeoExtent& value );

        /**
         * Result structure for method calls
         */
        struct Result {
            Result() : ok(true) { }
            Result(const std::string& m) : message(m), ok(false) { }
            operator bool() const { return ok; }
            bool ok;
            std::string message;
        };

        /**
         * Packages an image layer as a TMS repository.
         * @param layer          Image layer to export
         * @param rootFolder     Root output folder of TMS repo
         * @param imageExtension (optional) Force an image type extension (e.g., "jpg")
         */
        Result package(
            CVBF_LayerTerrainImage*        layer,
            const std::string& rootFolder,
            const std::string& imageExtension ="png" );

        /**
         * Packages an elevation layer as a TMS repository.
         * @param layer          Image layer to 
         * @param rootFolder     Root output folder of TMS repo
         */
        Result package( 
            CVBF_LayerTerrainElevation*    layer,
            const std::string& rootFolder );

    protected:

        Result packageImageTile(
            CVBF_LayerTerrainImage*          layer,
            const CVBF_TileKey&       key,
            const std::string&   rootDir,
            const std::string&   extension,
            unsigned&            out_maxLevel );

        Result packageElevationTile(
            CVBF_LayerTerrainElevation*      layer,
            const CVBF_TileKey&       key,
            const std::string&   rootDir,
            const std::string&   extension,
            unsigned&            out_maxLevel );

        bool shouldPackageKey( 
            const CVBF_TileKey&     key ) const;

    protected:

        bool                        _verbose;
        bool                        _abortOnError;
        bool                        _overwrite;
        bool                        _keepEmptyImageTiles;
        bool                        _subdivideSingleColorImageTiles;
        unsigned                    _maxLevel;
        std::vector<CVBF_GeoExtent>      _extents;
        ref_ptr<const CVBF_Profile> _outProfile;
        ref_ptr<osgDB::Options>    _imageWriteOptions;
    };

} } // namespace osgEarth::Util

#endif // OSGEARTHUTIL_TMS_PACKAGER_H
