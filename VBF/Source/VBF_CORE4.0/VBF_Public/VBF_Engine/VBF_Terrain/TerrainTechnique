#ifndef OSGTERRAIN_TERRAINTECHNIQUE
#define OSGTERRAIN_TERRAINTECHNIQUE 1

#include <VBF_Engine/VBF_SceneGraph/VBF_Object.h>

#include <VBF_Engine/VBF_SGUtil/UpdateVisitor>
#include <VBF_Engine/VBF_SGUtil/CullVisitor>

#include <VBF_Engine/VBF_Terrain/Export>

namespace osgTerrain {

class TerrainTile;

class OSGTERRAIN_EXPORT TerrainNeighbours
{
    public:

        TerrainNeighbours();
        ~TerrainNeighbours();

        void clear();
        void addNeighbour(TerrainTile* tile);
        void removeNeighbour(TerrainTile* tile);
        bool containsNeighbour(TerrainTile* tile) const;

    protected:

        TerrainNeighbours(const TerrainNeighbours& /*tn*/) {}
        TerrainNeighbours& operator = (const TerrainNeighbours& /*rhs*/) { return *this; }

        typedef std::set<TerrainTile*> Neighbours;

        mutable OpenThreads::Mutex      _neighboursMutex;
        Neighbours                      _neighbours;
};


class OSGTERRAIN_EXPORT TerrainTechnique : public osg::CVBF_Object, public ::DeleteObserver
{
    public:

        TerrainTechnique();

        /** Copy constructor using CopyOp to manage deep vs shallow copy.*/
        TerrainTechnique(const TerrainTechnique&,const osg::CopyOp& copyop=osg::CopyOp::SHALLOW_COPY);

        META_Object(osgTerrain, TerrainTechnique);

        TerrainTile* getTerrainTile() { return _terrainTile; }
        const TerrainTile* getTerrainTile() const { return _terrainTile; }

        virtual void init(int dirtyMask, bool assumeMultiThreaded);

        virtual void update(osgUtil::UpdateVisitor* nv);

        virtual void cull(osgUtil::CullVisitor* nv);

        /** Clean scene graph from any terrain technique specific nodes.*/
        virtual void cleanSceneGraph();

        /** Traverse the terrain subgraph.*/
        virtual void traverse(osg::NodeVisitor& nv);

        /** If State is non-zero, this function releases any associated OpenGL objects for
        * the specified graphics context. Otherwise, releases OpenGL objects
        * for all graphics contexts. */
        virtual void releaseGLObjects(osg::State* = 0) const {}

        void addNeighbour(TerrainTile* tile) { _neighbours.addNeighbour(tile); }
        void removeNeighbour(TerrainTile* tile) {  _neighbours.removeNeighbour(tile); }
        bool containsNeighbour(TerrainTile* tile) { return _neighbours.containsNeighbour(tile); }

    protected:

        virtual ~TerrainTechnique();

        void setTerrainTile(TerrainTile* tile);
        void setDirty(bool dirty);

        friend class osgTerrain::TerrainTile;

        TerrainTile*            _terrainTile;


        TerrainNeighbours       _neighbours;

};

}

#endif
