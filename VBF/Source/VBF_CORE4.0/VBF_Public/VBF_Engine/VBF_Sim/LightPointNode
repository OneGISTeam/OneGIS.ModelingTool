#ifndef OSGSIM_LIGHTPOINTNODE
#define OSGSIM_LIGHTPOINTNODE 1

#include <VBF_Engine/VBF_Sim/Export>
#include <VBF_Engine/VBF_Sim/LightPoint>
#include <VBF_Engine/VBF_Sim/LightPointSystem>

#include <VBF_Engine/VBF_SceneGraph/IVBF_SGNodeImpl.h>
#include <VBF_Engine/VBF_SceneGraph/VBF_SGNVisitOp.h>
#include <Types/VBF_BoundingBox.h>
#include <Types/VBF_Quat.h>
#include <Types/Vec4>

#include <vector>
#include <set>

namespace osgSim {


class OSGSIM_EXPORT LightPointNode : public osg::IVBF_SGNodeImpl<osg::IVBF_SGNode>
{
    typedef osg::IVBF_SGNodeImpl<osg::IVBF_SGNode> BaseClass;
    public :

        typedef std::vector< LightPoint > LightPointList;

        LightPointNode();
        
        /** Copy constructor using CopyOp to manage deep vs shallow copy.*/
        LightPointNode(const LightPointNode&,const osg::CopyOp& copyop=osg::CopyOp::SHALLOW_COPY);

        META_Node(osgSim,LightPointNode);

        virtual void traverse(osg::NodeVisitor& nv);


        unsigned int getNumLightPoints() const { return _lightPointList.size(); }


        unsigned int addLightPoint(const LightPoint& lp);
    
        void removeLightPoint(unsigned int pos);


        LightPoint& getLightPoint(unsigned int pos) { return _lightPointList[pos]; }

        const LightPoint& getLightPoint(unsigned int pos) const { return _lightPointList[pos]; }
        

        void setLightPointList(const LightPointList& lpl) { _lightPointList=lpl; }

        LightPointList& getLightPointList() { return _lightPointList; }

        const LightPointList& getLightPointList() const { return _lightPointList; }


        void setMinPixelSize(float minPixelSize) { _minPixelSize = minPixelSize; }
        
        float getMinPixelSize() const { return _minPixelSize; }

        void setMaxPixelSize(float maxPixelSize) { _maxPixelSize = maxPixelSize; }
        
        float getMaxPixelSize() const { return _maxPixelSize; }

        void setMaxVisibleDistance2(float maxVisibleDistance2) { _maxVisibleDistance2 = maxVisibleDistance2; }
        
        float getMaxVisibleDistance2() const { return _maxVisibleDistance2; }
        
        void setLightPointSystem( osgSim::LightPointSystem* lps) { _lightSystem = lps; }

        osgSim::LightPointSystem* getLightPointSystem() { return _lightSystem.get(); }
        const osgSim::LightPointSystem* getLightPointSystem() const { return _lightSystem.get(); }

        void setPointSprite(bool enable=true) { _pointSprites = enable; }

        bool getPointSprite() const { return _pointSprites; }

        virtual osg::BoundingSphere computeBound() const;

    protected:

        ~LightPointNode() {}

        // used to cache the bouding box of the lightpoints as a tighter
        // view frustum check. 
        mutable osg::BoundingBox _bbox;

        LightPointList  _lightPointList;

        float _minPixelSize;
        float _maxPixelSize;
        float _maxVisibleDistance2;

        ref_ptr<osgSim::LightPointSystem> _lightSystem;        
        
        bool _pointSprites;

};

}

#endif
