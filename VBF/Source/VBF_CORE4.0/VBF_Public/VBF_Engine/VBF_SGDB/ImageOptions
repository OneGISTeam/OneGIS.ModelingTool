#ifndef VBF_SGDB_IMAGEOPTIONS
#define VBF_SGDB_IMAGEOPTIONS 1

#include <VBF_Engine/VBF_SGDB/Options>

namespace osgDB {

class VBF_SGDB_EXPORT ImageOptions : public osgDB::Options
{
    public:
    
        ImageOptions();       
        ImageOptions(const std::string& str);           
        ImageOptions(const ImageOptions& options,const osg::CopyOp& copyop=osg::CopyOp::SHALLOW_COPY);

        META_Object(osgDB,ImageOptions);

        /** RatioWindow stores the window (as ratios of 0.0 to 1.0) from the overall imagery from which to extract the osg::Image*/
        struct RatioWindow
        {
            RatioWindow():
                windowX(0.0),
                windowY(0.0),
                windowWidth(1.0),
                windowHeight(1.0) {}

            void set(double x, double y, double w, double h)
            {
                windowX = x;
                windowY = y;
                windowWidth = w;
                windowHeight = h;
            }
            
            double windowX;
            double windowY;
            double windowWidth;
            double windowHeight;
        };
        
        /** PixelWindow stores the window (in exact pixels) from the overall imagery from which to extract the osg::Image*/
        struct PixelWindow
        {
            PixelWindow():
                windowX(0),
                windowY(0),
                windowWidth(0),
                windowHeight(0) {}
        
            void set(unsigned int x, unsigned int y, unsigned int w, unsigned int h)
            {
                windowX = x;
                windowY = y;
                windowWidth = w;
                windowHeight = h;
            }
            
            unsigned int windowX;
            unsigned int windowY;
            unsigned int windowWidth;
            unsigned int windowHeight;
        };
        
        enum ImageWindowMode
        {
            ALL_IMAGE,
            RATIO_WINDOW,
            PIXEL_WINDOW
        };
        
        enum ImageSamplingMode
        {
            NEAREST,
            LINEAR,
            CUBIC
        };

        /** Used as UserData attached to generated osg::Image's*/
        struct TexCoordRange : public ::CVBF_Referenced
        {
            TexCoordRange():
                _x(0.0),
                _y(0.0),
                _w(1.0),
                _h(1.0) {}
        
            void set(double x,double y, double w, double h)
            {
                _x = x;
                _y = y;
                _w = w;
                _h = h;
            }
        
            double _x,_y,_w,_h;
        };


        // source        
        ImageSamplingMode   _sourceImageSamplingMode;
        ImageWindowMode     _sourceImageWindowMode;
        RatioWindow         _sourceRatioWindow;
        PixelWindow         _sourcePixelWindow;

        // destination
        ref_ptr<osg::Image> _destinationImage;
       
        ImageWindowMode     _destinationImageWindowMode;
        RatioWindow         _destinationRatioWindow;
        PixelWindow         _destinationPixelWindow;

        GLenum              _destinationDataType;
        GLenum              _destinationPixelFormat;

        void init();
        
};


}

#endif // VBF_SGDB_IMAGEOPTIONS
