#ifndef VBF_SGDB_OPTIONS
#define VBF_SGDB_OPTIONS 1

#include <VBF_Engine/VBF_SGDB/Callbacks>
#include <VBF_Engine/VBF_SceneGraph/VBF_ObserverNodePath.h>

#include <deque>
#include <list>
#include <iosfwd>

namespace osgDB {


// 选择项：基类，用于给插件传递可选择项，以便控制插件的操作
class VBF_SGDB_EXPORT Options : public osg::CVBF_Object
{
    public:

        // 掩码用于确定加载的哪些数据被缓存readObject/Image/HeightField/IVBF_SGNode(filename)
        enum EVBF_CacheHintOptions
        {   
            CACHE_NONE          = 0,	// 不缓存任何类型的对象
            CACHE_NODES         = 1<<0,	// 缓存readNode(filename)读取的节点
            CACHE_IMAGES        = 1<<1,	// 缓存readImage(filename)读取的图像
            CACHE_HEIGHTFIELDS  = 1<<2,	// 缓存readHeightField(filename)读取的高程图
            CACHE_ARCHIVES      = 1<<3,
            CACHE_OBJECTS       = 1<<4,	// 缓存readObject(filename)读取的对象
            CACHE_SHADERS       = 1<<5,	// 缓存readShader(filename)读取的着色器
            CACHE_ALL           = CACHE_NODES | CACHE_IMAGES | CACHE_HEIGHTFIELDS | CACHE_ARCHIVES | CACHE_OBJECTS | CACHE_SHADERS
        };

        // 用于确定输入数据时哪些数据保留双精度（如果原始数据是双精度）
		// 通常，geometry在渲染前被转换为单精度浮点数，以便确保高性能
        enum EVBF_PrecisionHint // 精度处理
        {
            FLOAT_PRECISION_ALL              = 0,

            DOUBLE_PRECISION_VERTEX          = 1<<0,
            DOUBLE_PRECISION_NORMAL          = 1<<1,
            DOUBLE_PRECISION_COLOR           = 1<<2,
            DOUBLE_PRECISION_SECONDARY_COLOR = 1<<3,
            DOUBLE_PRECISION_FOG_COORD       = 1<<4,
            DOUBLE_PRECISION_TEX_COORD       = 1<<5,
            DOUBLE_PRECISION_VERTEX_ATTRIB   = 1<<6,

            DOUBLE_PRECISION_ALL = DOUBLE_PRECISION_VERTEX          | DOUBLE_PRECISION_NORMAL    | DOUBLE_PRECISION_COLOR     |
                                   DOUBLE_PRECISION_SECONDARY_COLOR | DOUBLE_PRECISION_FOG_COORD | DOUBLE_PRECISION_TEX_COORD |
                                   DOUBLE_PRECISION_VERTEX_ATTRIB
        };

        enum EVBF_BuildKdTreesHint // 加载数据时是否自动构建KD树
        {
            NO_PREFERENCE,			// 无所谓
            DO_NOT_BUILD_KDTREES,	// 不建
            BUILD_KDTREES			// 建
        };


        Options();
        Options(const std::string& str);
        Options(const Options& options,const osg::CopyOp& copyop=osg::CopyOp::SHALLOW_COPY);

        META_Object(osgDB,Options);

        Options* cloneOptions(const osg::CopyOp& copyop=osg::CopyOp::SHALLOW_COPY) const { return static_cast<Options*>(clone(copyop)); }

        // 设置/获取可选项字符串
        void setOptionString(const std::string& str) { _str = str; parsePluginStringData(str); }
        const std::string& getOptionString() const { return _str; }

		// 设置/获取数据路径，用于加载模型时查找模型
        void setDatabasePath(const std::string& str) { _databasePaths.clear();  _databasePaths.push_back(str); }
        FilePathList& getDatabasePathList() { return _databasePaths; }
        const FilePathList& getDatabasePathList() const { return _databasePaths; }


		// 设置/获取缓存对象的选项
        void setObjectCacheHint(EVBF_CacheHintOptions useObjectCache) { _objectCacheHint = useObjectCache; }
        EVBF_CacheHintOptions getObjectCacheHint() const { return _objectCacheHint; }

        // 设置/获取插件导入数据时精度转换的选项
        void setPrecisionHint(EVBF_PrecisionHint hint) { _precisionHint = hint; }
        EVBF_PrecisionHint getPrecisionHint() const { return _precisionHint; }


		// 设置/获取加载模型时构建KD树的选项
        void setBuildKdTreesHint(EVBF_BuildKdTreesHint hint) { _buildKdTreesHint = hint; }
        EVBF_BuildKdTreesHint getBuildKdTreesHint() const { return _buildKdTreesHint; }

		// 设置/获取口令表，用于访问有安全保护的数据
        void setAuthenticationMap(AuthenticationMap* authenticationMap) { _authenticationMap = authenticationMap; }
        const AuthenticationMap* getAuthenticationMap() const { return _authenticationMap.get(); }



		// 设置/获取/移除某插件专用数据（通用型）
		void setPluginData(const std::string& s, void* v) const { _pluginData[s] = v; }
		void removePluginData(const std::string& s) const { _pluginData.erase(s); }
		unsigned int getNumPluginData() const { return _pluginData.size(); }
		void* getPluginData(const std::string& s) { return _pluginData[s]; }
		const void* getPluginData(const std::string& s) const
		{
			PluginDataMap::const_iterator itr = _pluginData.find(s);
            return (itr == _pluginData.end()) ? 0 : itr->second;
        }



        // 设置/获取/移除某插件专用数据（字符串型）
		void setPluginStringData(const std::string& s, const std::string& v) const { _pluginStringData[s] = v; }
		void removePluginStringData(const std::string& s) const { _pluginStringData.erase(s); }
		unsigned int getNumPluginStringData() const { return _pluginStringData.size(); }
		std::string& getPluginStringData(const std::string& s) { return _pluginStringData[s]; }
        const std::string getPluginStringData(const std::string& s) const
        {
            PluginStringDataMap::const_iterator itr = _pluginStringData.find(s);
            return (itr == _pluginStringData.end()) ? std::string("") : itr->second;
        }

		// 解析插件专用数据，在Options(const std::string&)构造函数中自动执行
        void parsePluginStringData(const std::string& str, char separator1=' ', char separator2='=');




        // 设置/获取 "实现文件查找功能" 的回调，替换默认的文件查找功能实现
        void setFindFileCallback( FindFileCallback* cb) { _findFileCallback = cb; }
        FindFileCallback* getFindFileCallback() const { return _findFileCallback.get(); }

        // 设置/获取 "实现文件读入功能" 的回调，替换默认的文件读入功能实现
        void setReadFileCallback( ReadFileCallback* cb) { _readFileCallback = cb; }
        ReadFileCallback* getReadFileCallback() const { return _readFileCallback.get(); }

        // 设置/获取 "实现文件写入功能" 的回调，替换默认的文件写入功能实现
        void setWriteFileCallback( WriteFileCallback* cb) { _writeFileCallback = cb; }
        WriteFileCallback* getWriteFileCallback() const { return _writeFileCallback.get(); }

		// 设置/获取用于"通知DatabasePager文件是在本地还是在远程文件系统"的回调函数
        void setFileLocationCallback( FileLocationCallback* cb) { _fileLocationCallback = cb; }
        FileLocationCallback* getFileLocationCallback() const { return _fileLocationCallback.get(); }

        // 设置/获取文件缓存，用于管理从网络下载后缓存到本地的文件
        void setFileCache(FileCache* fileCache) { _fileCache = fileCache; }
        FileCache* getFileCache() const { return _fileCache.get(); }


        /** Set the terrain observer_ptr, use to decorate any osgTerrain subgraphs.*/
		// 用于装饰所有的osgTerrain subgraphs???
        void setTerrain(observer_ptr<osg::IVBF_SGNode>& terrain) { _terrain = terrain; }
        const observer_ptr<osg::IVBF_SGNode>& getTerrain() const { return _terrain; }


    protected:

        virtual ~Options();

        std::string                     _str;					// 字符串形式的可选项
        FilePathList                    _databasePaths;			// 数据路径列表
        EVBF_CacheHintOptions                _objectCacheHint;
        EVBF_PrecisionHint                   _precisionHint;
        EVBF_BuildKdTreesHint                _buildKdTreesHint;
        ref_ptr<AuthenticationMap> _authenticationMap;

        typedef std::map<std::string,void*> PluginDataMap;
        mutable PluginDataMap _pluginData;
        typedef std::map<std::string,std::string> PluginStringDataMap;
        mutable PluginStringDataMap _pluginStringData;

        ref_ptr<FindFileCallback>      _findFileCallback;
        ref_ptr<ReadFileCallback>      _readFileCallback;
        ref_ptr<WriteFileCallback>     _writeFileCallback;
        ref_ptr<FileLocationCallback>  _fileLocationCallback;

        ref_ptr<FileCache>             _fileCache;

        observer_ptr<osg::IVBF_SGNode>        _terrain;
};

}

#endif // VBF_SGDB_OPTIONS
