#ifndef VBF_SGDB_ARCHIVE
#define VBF_SGDB_ARCHIVE 1

#include <VBF_Engine/VBF_SGDB/ReaderWriter>
#include <VBF_Engine/VBF_SGDB/Registry>
#include <Types/VBF_PublicTypes.h>

#include <fstream>
#include <list>

namespace osgDB {


// 实现数据库存档的基类 See src/osgPlugins/osga for an example of a concrete implementation. */
class VBF_SGDB_EXPORT Archive : public ReaderWriter
{
    public:
        Archive();
        virtual ~Archive(); 

        virtual const char* libraryName() const;
        virtual const char* className() const;

        virtual bool acceptsExtension(const std::string& /*extension*/) const;

        // 关闭archive
        virtual void close() = 0;

		// 获取archived文件的文件名
        virtual std::string getArchiveFileName() const = 0;

		// 获取在Archive中记录的主文件的文件名
        virtual std::string getMasterFileName() const = 0;

        /** return true if file exists in archive.*/
        virtual bool fileExists(const std::string& filename) const = 0;

        /** return type of file. */
        virtual EVBF_FILETYPE getFileType(const std::string& filename) const = 0;

        typedef CVBF_DirectoryContents FileNameList;

        /** Get the full list of file names available in the archive.*/
        virtual bool getFileNames(FileNameList& fileNames) const = 0;

        /** return the contents of a directory.
          * returns an empty array on any error.*/
        virtual CVBF_DirectoryContents VBF_getDirectoryContents(const std::string& dirName) const;


        virtual ReadResult readObject(const std::string& /*fileName*/,const Options* =NULL) const = 0;
        virtual ReadResult readImage(const std::string& /*fileName*/,const Options* =NULL) const = 0;
        virtual ReadResult readHeightField(const std::string& /*fileName*/,const Options* =NULL) const = 0;
        virtual ReadResult readNode(const std::string& /*fileName*/,const Options* =NULL) const = 0;
        virtual ReadResult readShader(const std::string& /*fileName*/,const Options* =NULL) const = 0;

        virtual WriteResult writeObject(const osg::CVBF_Object& /*obj*/,const std::string& /*fileName*/,const Options* =NULL) const = 0;
        virtual WriteResult writeImage(const osg::Image& /*image*/,const std::string& /*fileName*/,const Options* =NULL) const = 0;
        virtual WriteResult writeHeightField(const osg::HeightField& /*heightField*/,const std::string& /*fileName*/,const Options* =NULL) const = 0;
        virtual WriteResult writeNode(const osg::IVBF_SGNode& /*node*/,const std::string& /*fileName*/,const Options* =NULL) const = 0;
        virtual WriteResult writeShader(const osg::Shader& /*shader*/,const std::string& /*fileName*/,const Options* =NULL) const = 0;

};

// 打开一个文件用于读/写
VBF_SGDB_EXPORT Archive* openArchive(const std::string& filename, ReaderWriter::ArchiveStatus status, unsigned int indexBlockSizeHint=4096);
VBF_SGDB_EXPORT Archive* openArchive(const std::string& filename, ReaderWriter::ArchiveStatus status, unsigned int indexBlockSizeHint,Options* options);
}

#endif // VBF_SGDB_ARCHIVE
