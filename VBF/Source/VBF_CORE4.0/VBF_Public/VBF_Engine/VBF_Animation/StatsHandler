/*  -*-c++-*- 
 *  Copyright (C) 2009 Cedric Pinson <mornifle@plopbyte.net>
 *
 * This library is open source and may be redistributed and/or modified under  
 * the terms of the OpenSceneGraph Public License (OSGPL) version 0.0 or 
 * (at your option) any later version.  The full license is in LICENSE file
 * included with this distribution, and on the openscenegraph.org website.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 * OpenSceneGraph Public License for more details.
*/

#ifndef OSGANIMATION_STATSHANDLER_H
#define OSGANIMATION_STATSHANDLER_H

#include <VBF_Engine/VBF_Animation/Timeline>
#include <VBF_Display/VBF_Manipulator/VBF_GUIEventHandler.h>
#include <VBF_Display/VBF_Viewer/VBF_Viewer.h>
#include <VBF_Display/VBF_Viewer/VBF_ViewerSimple.h>
#include <VBF_Engine/VBF_Text/Text>

namespace osgAnimation
{
#if 0
    struct StatAction
    {
        
        std::string m_sName;
        ref_ptr<osg::IVBF_SGNodeGroup> _group;
        ref_ptr<osg::IVBF_SGNodeGeometry> _label;
        ref_ptr<osg::IVBF_SGNodeGroupTransformMatrix> _graph;
        ref_ptr<osgText::Text> _textLabel;

        void init(CVBF_Stats* stats, const std::string& name, const osg::Vec3& pos, float width, float heigh, const osg::Vec4& color);
        void setPosition(const osg::Vec3& pos);
        void setAlpha(float v);
    };

#endif

/** Event handler for adding on screen stats reporting to Viewers.*/
    class OSGANIMATION_EXPORT StatsHandler : public osgGA::GUIEventHandler 
    {
    public: 

        StatsHandler();

        enum StatsType
        {
            NO_STATS = 0,
            FRAME_RATE = 1,
            LAST = 2
        };
        
        void setKeyEventTogglesOnScreenStats(int key) { _keyEventTogglesOnScreenStats = key; }
        int getKeyEventTogglesOnScreenStats() const { return _keyEventTogglesOnScreenStats; }
        
        void setKeyEventPrintsOutStats(int key) { _keyEventPrintsOutStats = key; }
        int getKeyEventPrintsOutStats() const { return _keyEventPrintsOutStats; }

        double getBlockMultiplier() const { return _blockMultiplier; }

        void reset();

        osg::IVBF_Camera* getCamera() { return _camera.get(); }
        const osg::IVBF_Camera* getCamera() const { return _camera.get(); }

        virtual bool handle(const osgGA::GUIEventAdapter& ea, ::IVBF_GUIActionAdapter& aa);

        // 获取鼠标和键盘的用法
        virtual void GetUsage(osg::ApplicationUsage& usage) const;

    protected:

        void setUpHUDCamera(CVBF_Viewer* viewer);

        osg::Geometry* createBackgroundRectangle(const osg::Vec3& pos, const float width, const float height, osg::Vec4& color);

        osg::Geometry* createGeometry(const osg::Vec3& pos, float height, const osg::Vec4& colour, unsigned int numBlocks);

        osg::Geometry* createFrameMarkers(const osg::Vec3& pos, float height, const osg::Vec4& colour, unsigned int numBlocks);

        osg::Geometry* createTick(const osg::Vec3& pos, float height, const osg::Vec4& colour, unsigned int numTicks);
        
        osg::IVBF_SGNode* createCameraTimeStats(const std::string& font, osg::Vec3& pos, float startBlocks, bool acquireGPUStats, float characterSize, CVBF_Stats* viewerStats, osg::IVBF_Camera* camera);

        void setUpScene(CVBF_ViewerSimple* viewer);
        
        int                                 _keyEventTogglesOnScreenStats;
        int                                 _keyEventPrintsOutStats;

        int                                 _statsType;

        bool                                _initialized;
        ref_ptr<osg::IVBF_Camera>           _camera;
        
        ref_ptr<osg::IVBF_SGNodeGroupSwitch>           _switch;
        ref_ptr<osg::IVBF_SGNodeGroup>            _group;
        
        unsigned int                        _frameRateChildNum;
        unsigned int                        _numBlocks;
        double                              _blockMultiplier;
        
        float                               _statsWidth;
        float                               _statsHeight;

//        std::map<std::string, StatAction >      _actions;
    };

}
#endif
