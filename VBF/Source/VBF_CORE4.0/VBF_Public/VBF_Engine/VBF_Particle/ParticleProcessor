#ifndef OSGPARTICLE_PARTICLEPROCESSOR
#define OSGPARTICLE_PARTICLEPROCESSOR 1

#include <VBF_Engine/VBF_Particle/Export>
#include <VBF_Engine/VBF_Particle/VBF_ParticleSystem.h>

#include <VBF_Base/ref_ptr>
#include <VBF_Engine/VBF_SceneGraph/VBF_Object.h>

#include <VBF_Engine/VBF_SceneGraph/VBF_SGNVisitOp.h>
#include <VBF_Engine/VBF_SceneGraph/CopyOp>
#include <Types/Vec3>
#include <Types/VBF_Matrix.h>

#include <VBF_Engine/VBF_SceneGraph/IVBF_SGNode.h>
#include <VBF_Engine/VBF_SceneGraph/IVBF_SGNodeImpl.h>

namespace osgParticle
{

    // 粒子处理器，对粒子进行处理的类（如Emitter和Program）的基类
    class OSGPARTICLE_EXPORT ParticleProcessor: public osg::IVBF_SGNodeImpl<osg::IVBF_SGNode> 
	{
    public:
    
        enum ReferenceFrame 
		{
            RELATIVE_RF, // 相对的
            ABSOLUTE_RF  // 绝对的，使用的是局部坐标系
        };
        
        ParticleProcessor();
        ParticleProcessor(const ParticleProcessor& copy, const osg::CopyOp& copyop = osg::CopyOp::SHALLOW_COPY);

        virtual const char* libraryName() const { return "osgParticle"; }
        virtual const char* className() const { return "ParticleProcessor"; }
        virtual bool isSameKindAs(const osg::CVBF_Object* obj) const { return dynamic_cast<const ParticleProcessor*>(obj) != 0; }
        virtual void accept(osg::NodeVisitor& nv) { if (nv.validNodeMask(*this)) { nv.pushOntoNodePath(this); nv.apply(*this); nv.popFromNodePath(); } }        
        
        // 获取设置Reference Frame
        inline ReferenceFrame getReferenceFrame() const;
        inline void setReferenceFrame(ReferenceFrame rf);
        
		// 设置/获取/判断该处理器是否可用
        bool getEnabled() const { return _enabled; }
        inline bool isEnabled() const;
        inline void setEnabled(bool v);
        

		// 设置/获取粒子系统（粒子处理的目的地）
        inline ParticleSystem* getParticleSystem();
        inline const ParticleSystem* getParticleSystem() const;
        inline void setParticleSystem(ParticleSystem* ps);
        
		// 设置/获取是否连续处理的标志
        inline void setEndless(bool type);
        bool getEndless() const { return _endless; }
        inline bool isEndless() const;
        
		// 设置/获取该处理器的寿命
        inline void setLifeTime(double t);
        inline double getLifeTime() const;
        
		// 设置/获取该处理器的开始时间
        inline void setStartTime(double t);
        inline double getStartTime() const;

        // 设置/获取该处理器的当前时间
        inline void setCurrentTime(double t);
        inline double getCurrentTime() const;
        
        /// Set the reset time of this processor. A value of 0 disables reset.
        inline void setResetTime(double t);
        
        /// Get the reset time of this processor.
        inline double getResetTime() const;
        
        /**
          Check whether the processor is alive with respect to start time and
          life duration. Note that this method may return true even if the 
          processor has been disabled by calling setEnabled(false). To test
          whether the processor is actually processing particles or not, you
          should evaluate (isEnabled() && isAlive()).
         */
        inline bool isAlive() const;
        
        void traverse(osg::NodeVisitor& nv);

        /// Get the current local-to-world transformation matrix (valid only during cull traversal).
        inline const osg::Matrix& getLocalToWorldMatrix();
        
        /// Get the current world-to-local transformation matrix (valid only during cull traversal).
        inline const osg::Matrix& getWorldToLocalMatrix();
        
        /// Get the previous local-to-world transformation matrix (valid only during cull traversal).
        inline const osg::Matrix& getPreviousLocalToWorldMatrix();
        
        /// Get the previous world-to-local transformation matrix (valid only during cull traversal).
        inline const osg::Matrix& getPreviousWorldToLocalMatrix();


        /// Transform a point from local to world coordinates (valid only during cull traversal).
        inline osg::Vec3 transformLocalToWorld(const osg::Vec3& P);
        
        /// Transform a vector from local to world coordinates, discarding translation (valid only during cull traversal).
        inline osg::Vec3 rotateLocalToWorld(const osg::Vec3& P);
        
        /// Transform a point from world to local coordinates (valid only during cull traversal).
        inline osg::Vec3 transformWorldToLocal(const osg::Vec3& P);
        
        /// Transform a vector from world to local coordinates, discarding translation (valid only during cull traversal).
        inline osg::Vec3 rotateWorldToLocal(const osg::Vec3& P);

        virtual osg::BoundingSphere computeBound() const;    

    protected:
        virtual ~ParticleProcessor() {}
        ParticleProcessor& operator=(const ParticleProcessor&) { return *this; }
        
		// 处理，必须在子类中重载
        virtual void process(double dt) = 0;
        
    private:
        ReferenceFrame _rf;
        bool _enabled;
        double _t0;
        ref_ptr<ParticleSystem> _ps;
        bool _first_ltw_compute;
        bool _need_ltw_matrix;
        bool _first_wtl_compute;
        bool _need_wtl_matrix;
        osg::Matrix _ltw_matrix;
        osg::Matrix _wtl_matrix;
        osg::Matrix _previous_ltw_matrix;
        osg::Matrix _previous_wtl_matrix;
        osg::NodeVisitor* _current_nodevisitor;
        
        bool _endless;
        
        double _lifeTime;
        double _startTime;
        double _currentTime;
        double _resetTime;
        
        //added- 1/17/06- bgandere@nps.edu 
        //a var to keep from doing multiple updates
        unsigned int _frameNumber;
    };
    
    // INLINE FUNCTIONS
    
    inline ParticleProcessor::ReferenceFrame ParticleProcessor::getReferenceFrame() const
    {
        return _rf;
    }
    
    inline void ParticleProcessor::setReferenceFrame(ReferenceFrame rf)
    {
        _rf = rf;
    }
    
    inline bool ParticleProcessor::isEnabled() const
    {
        return _enabled;
    }
    
    inline void ParticleProcessor::setEnabled(bool v)
    {
        _enabled = v;
        if (_enabled)
        {
            _currentTime = 0;
        }
    }
    
    inline ParticleSystem* ParticleProcessor::getParticleSystem()
    {
        return _ps.get();
    }

    inline const ParticleSystem* ParticleProcessor::getParticleSystem() const
    {
        return _ps.get();
    }
    
    inline void ParticleProcessor::setParticleSystem(ParticleSystem* ps)
    {
        _ps = ps;
    }
   
    inline void ParticleProcessor::setEndless(bool type)
    {
        _endless = type;
    }
        
    inline bool ParticleProcessor::isEndless() const
    {
        return _endless;
    }

    inline void ParticleProcessor::setLifeTime(double t)
    {
        _lifeTime = t;
    }
        
    inline double ParticleProcessor::getLifeTime() const
    {
        return _lifeTime;
    }
       
    inline void ParticleProcessor::setStartTime(double t)
    {
        _startTime = t;
    }
        
    inline double ParticleProcessor::getStartTime() const
    {
        return _startTime;
    }
    inline void ParticleProcessor::setCurrentTime(double t)
    {
        _currentTime = t;
    }
        
    inline double ParticleProcessor::getCurrentTime() const
    {
        return _currentTime;
    }
    
    inline void ParticleProcessor::setResetTime(double t)
    {
        _resetTime = t;
    }
    
    inline double ParticleProcessor::getResetTime() const
    {
        return _resetTime;
    }

    inline const osg::Matrix& ParticleProcessor::getLocalToWorldMatrix()    
    {
        if (_need_ltw_matrix) {
            _previous_ltw_matrix = _ltw_matrix;
            _ltw_matrix = osg::computeLocalToWorld(_current_nodevisitor->getNodePath());
            if (_first_ltw_compute)
            {
                _previous_ltw_matrix = _ltw_matrix;
                _first_ltw_compute = false;
            }
            _need_ltw_matrix = false;
        }
        return _ltw_matrix;
    }

    inline const osg::Matrix& ParticleProcessor::getWorldToLocalMatrix()    
    {
        if (_need_wtl_matrix) {
            _previous_wtl_matrix = _wtl_matrix;
            _wtl_matrix = osg::computeWorldToLocal(_current_nodevisitor->getNodePath());
            if (_first_wtl_compute)
            {
                _previous_wtl_matrix = _wtl_matrix;
                _first_wtl_compute = false;
            }
            _need_wtl_matrix = false;
        }
        return _wtl_matrix;
    }
    
    inline const osg::Matrix& ParticleProcessor::getPreviousLocalToWorldMatrix()
    {
        if (_need_ltw_matrix) getLocalToWorldMatrix();
        return _previous_ltw_matrix;
    }

    inline const osg::Matrix& ParticleProcessor::getPreviousWorldToLocalMatrix()
    {
        if (_need_wtl_matrix) getWorldToLocalMatrix();
        return _previous_wtl_matrix;
    }

    inline osg::Vec3 ParticleProcessor::transformLocalToWorld(const osg::Vec3& P)
    {
        return getLocalToWorldMatrix().preMult(P);
    }
    
    inline osg::Vec3 ParticleProcessor::transformWorldToLocal(const osg::Vec3& P)
    {
        return getWorldToLocalMatrix().preMult(P);
    }

    inline osg::Vec3 ParticleProcessor::rotateLocalToWorld(const osg::Vec3& P)
    {
        return getLocalToWorldMatrix().preMult(P) - 
            getLocalToWorldMatrix().preMult(osg::Vec3(0, 0, 0));
    }
    
    inline osg::Vec3 ParticleProcessor::rotateWorldToLocal(const osg::Vec3& P)
    {
        return getWorldToLocalMatrix().preMult(P) -
            getWorldToLocalMatrix().preMult(osg::Vec3(0, 0, 0));
    }
    
    inline bool ParticleProcessor::isAlive() const
    {
        return _currentTime < (_lifeTime + _startTime);
    }

}


#endif
